-- Creación de la base de datos
CREATE DATABASE IF NOT EXISTS turismo_universo;
USE turismo_universo;

-- Tabla de Usuarios (Clientes y Empleados)
CREATE TABLE IF NOT EXISTS usuarios (
    usuario_id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    contraseña VARCHAR(255) NOT NULL,  -- Guardar hash de la contraseña
    tipo_usuario ENUM('cliente', 'empleado', 'admin') DEFAULT 'cliente',
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado ENUM('activo', 'inactivo') DEFAULT 'activo',
    usuario VARCHAR(30) NOT NULL UNIQUE
);

-- Tabla de Empleados
CREATE TABLE IF NOT EXISTS empleados (
    empleado_id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    cargo VARCHAR(50),
    sucursal_id INT,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE
);

-- Tabla de Sucursales
CREATE TABLE IF NOT EXISTS sucursales (
    sucursal_id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100),
    ubicacion VARCHAR(255),
    telefono VARCHAR(20)
);

-- Tabla de Rutas
CREATE TABLE IF NOT EXISTS rutas (
    ruta_id INT AUTO_INCREMENT PRIMARY KEY,
    origen VARCHAR(100) NOT NULL,
    destino VARCHAR(100) NOT NULL,
    precio DECIMAL(10, 2) NOT NULL,
    horario_salida TIME NOT NULL,
    duracion TIME NOT NULL
);

-- Tabla de Buses
CREATE TABLE IF NOT EXISTS buses (
    bus_id INT AUTO_INCREMENT PRIMARY KEY,
    placa VARCHAR(10) UNIQUE NOT NULL,
    modelo VARCHAR(50),
    capacidad INT NOT NULL,
    año INT NOT NULL,
    estado ENUM('activo', 'inactivo') DEFAULT 'activo'
);

-- Tabla de Mantenimientos (para los Buses)
CREATE TABLE IF NOT EXISTS mantenimientos (
    mantenimiento_id INT AUTO_INCREMENT PRIMARY KEY,
    bus_id INT NOT NULL,
    fecha_mantenimiento DATE NOT NULL,
    tipo_mantenimiento VARCHAR(100) NOT NULL,
    costo DECIMAL(10, 2),
    FOREIGN KEY (bus_id) REFERENCES buses(bus_id) ON DELETE CASCADE
);

-- Tabla de Conductores
CREATE TABLE IF NOT EXISTS conductores (
    conductor_id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    dni VARCHAR(20) UNIQUE NOT NULL,
    licencia VARCHAR(50) NOT NULL,
    telefono VARCHAR(20),
    fecha_contratacion DATE,
    estado ENUM('activo', 'inactivo') DEFAULT 'activo'
);

-- Tabla de Papeletas (Infracciones para Conductores)
CREATE TABLE IF NOT EXISTS papeletas (
    papeleta_id INT AUTO_INCREMENT PRIMARY KEY,
    conductor_id INT NOT NULL,
    fecha_infraccion DATE NOT NULL,
    tipo_infraccion VARCHAR(255) NOT NULL,
    monto DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (conductor_id) REFERENCES conductores(conductor_id) ON DELETE CASCADE
);

-- Tabla de Carnet de Sanidad (Conductores)
CREATE TABLE IF NOT EXISTS carnet_sanidad (
    carnet_id INT AUTO_INCREMENT PRIMARY KEY,
    conductor_id INT NOT NULL,
    fecha_emision DATE NOT NULL,
    fecha_vencimiento DATE NOT NULL,
    estado ENUM('vigente', 'vencido') DEFAULT 'vigente',
    FOREIGN KEY (conductor_id) REFERENCES conductores(conductor_id) ON DELETE CASCADE
);

-- Tabla de Programación de Rutas
CREATE TABLE IF NOT EXISTS programacion_rutas (
    programacion_id INT AUTO_INCREMENT PRIMARY KEY,
    ruta_id INT NOT NULL,
    bus_id INT NOT NULL,
    conductor_id INT NOT NULL,
    fecha_salida DATE NOT NULL,
    hora_salida TIME NOT NULL,
    hora_llegada TIME,
    estado ENUM('programado', 'en_viaje', 'completado', 'cancelado') DEFAULT 'programado',
    FOREIGN KEY (ruta_id) REFERENCES rutas(ruta_id) ON DELETE CASCADE,
    FOREIGN KEY (bus_id) REFERENCES buses(bus_id) ON DELETE CASCADE,
    FOREIGN KEY (conductor_id) REFERENCES conductores(conductor_id) ON DELETE CASCADE
);

-- Nueva Tabla de Clientes
CREATE TABLE IF NOT EXISTS clientes (
    cliente_id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    genero ENUM('Masculino', 'Femenino', 'Otro'),
    nacionalidad VARCHAR(50),
    tipo_documento ENUM('Cédula de Identidad', 'Pasaporte', 'Licencia de Conducir', 'Otro'),
    numero_documento VARCHAR(50) UNIQUE,
    numero_pasajero_frecuente VARCHAR(50),
    aerolinea VARCHAR(50),
    email VARCHAR(100) UNIQUE NOT NULL,
    telefono_codigo_pais VARCHAR(10),
    telefono_numero VARCHAR(20),
    asistencia_especial BOOLEAN DEFAULT FALSE
);

-- Nueva Tabla de Boletos
CREATE TABLE IF NOT EXISTS boletos (
    boleto_id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    programacion_ruta_id INT NOT NULL,
    asiento INT NOT NULL,
    equipaje_extra BOOLEAN DEFAULT FALSE,
    precio_total DECIMAL(10, 2) NOT NULL,
    estado ENUM('reservado', 'pagado', 'cancelado') DEFAULT 'reservado',
    fecha_compra TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id) ON DELETE CASCADE,
    FOREIGN KEY (programacion_ruta_id) REFERENCES programacion_rutas(programacion_id) ON DELETE CASCADE
    );
    ALTER TABLE boletos 
    ADD COLUMN codigo_reserva VARCHAR(15) UNIQUE;


-- Nueva Tabla de Pagos
CREATE TABLE IF NOT EXISTS pagos (
    pago_id INT AUTO_INCREMENT PRIMARY KEY,
    boleto_id INT NOT NULL,
    metodo_pago ENUM('tarjeta', 'efectivo', 'transferencia') NOT NULL,
    estado_pago ENUM('pendiente', 'completado') DEFAULT 'pendiente',
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (boleto_id) REFERENCES boletos(boleto_id) ON DELETE CASCADE
);

-- Nueva Tabla de Historial de Viajes
CREATE TABLE IF NOT EXISTS historial_viajes (
    historial_id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    boleto_id INT NOT NULL,
    fecha_viaje DATE NOT NULL,
    origen VARCHAR(100) NOT NULL,
    destino VARCHAR(100) NOT NULL,
    estado ENUM('completado', 'cancelado') DEFAULT 'completado',
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id) ON DELETE CASCADE,
    FOREIGN KEY (boleto_id) REFERENCES boletos(boleto_id) ON DELETE CASCADE
);

-- Índices para mejorar el rendimiento
CREATE INDEX idx_usuario_email ON usuarios(email);
CREATE INDEX idx_boletos_cliente_id ON boletos(cliente_id);
CREATE INDEX idx_boletos_programacion_ruta_id ON boletos(programacion_ruta_id);
CREATE INDEX idx_empleados_usuario_id ON empleados(usuario_id);
CREATE INDEX idx_rutas_origen_destino ON rutas(origen, destino);
